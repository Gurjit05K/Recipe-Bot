from flask import Flask, request, jsonify
from flask_cors import CORS
import requests

app = Flask(__name__)
CORS(app)

API_KEY = "779f5cdd70654ae1b363a51b50c30f7d"

user_data = {}  # Store user session data


@app.route("/get_recipe", methods=["POST"])
def get_recipe():
    try:
        data = request.get_json()
        user_input = data.get("message", "").strip().lower()

        user_id = "default_user"  # Track a single user session

        if user_id not in user_data:
            user_data[user_id] = {"step": "start"}  # Start fresh session

        step = user_data[user_id]["step"]

        # Step 0: Greeting
        if step == "start":
            if user_input in ["hi", "hello", "hey"]:
                user_data[user_id]["step"] = "bmi"
                return jsonify({"message": "Hello! Please enter your height (cm) and weight (kg) as 'height, weight'."})
            else:
                return jsonify({"message": "Please start by saying 'hi' or 'hello'."})

        # Step 1: Get BMI
        elif step == "bmi":
            try:
                height, weight = map(float, user_input.split(","))
                bmi = weight / ((height / 100) ** 2)
                user_data[user_id]["bmi"] = bmi
                user_data[user_id]["step"] = "preference"

                if bmi < 18.5:
                    category = "underweight"
                elif 18.5 <= bmi < 24.9:
                    category = "normal weight"
                elif 25 <= bmi < 29.9:
                    category = "overweight"
                else:
                    category = "obese"

                return jsonify({"message": f"Your BMI is {bmi:.1f} ({category}). Do you prefer vegetarian or non-vegetarian meals?"})
            except:
                return jsonify({"message": "Invalid input. Please enter your height and weight as 'height, weight'."})

        # Step 2: Get Vegetarian/Non-Vegetarian Preference
        elif step == "preference":
            if user_input in ["vegetarian", "veg", "non-vegetarian", "non veg", "nonveg"]:
                user_data[user_id]["preference"] = "vegetarian" if "veg" in user_input else "non-vegetarian"
                user_data[user_id]["step"] = "ingredients"
                return jsonify({"message": "Got it! Now, please enter the ingredients you have."})
            else:
                return jsonify({"message": "Please enter 'vegetarian' or 'non-vegetarian'."})

        # Step 3: Get Ingredients & Provide Three Meals
        elif step == "ingredients":
            user_data[user_id]["ingredients"] = ",".join(user_input.split()).lower()
            preference = user_data[user_id]["preference"]
            bmi_category = user_data[user_id]["bmi"]

            # Get recipes based on preference
            recipes = fetch_recipes(user_data[user_id]["ingredients"], preference)
            if not recipes:
                return jsonify({"message": "No suitable recipes found for your preference and ingredients."})

            # Select recipes for three meals
            meal_plan = select_meal_plan(recipes, bmi_category)

            if meal_plan:
                response_message = "🍽️ <b>Meal Plan Based on Your BMI:</b><br><br>"
                for meal, recipe in meal_plan.items():
                     response_message += f"<b>🔹 {meal.capitalize()}</b><br>"
                     response_message += f"<b>📌 {recipe['title']}</b><br><br>"
                     response_message += f"{recipe['instructions']}<br><br>"
                     response_message += f"<b>⚡ Nutrition:</b> {recipe['calories']} kcal | {recipe['protein']}g Protein | {recipe['carbs']}g Carbs | {recipe['fat']}g Fat<br><br>"

                return jsonify({"message": response_message})
            else:
                return jsonify({"message": "<b>⚠️ No suitable meal plan found based on your BMI.</b>"})

        else:
            return jsonify({"message": "Invalid request. Let's continue from where we left off."})

    except Exception as e:
        print("Error:", str(e))
        return jsonify({"message": f"Server Error: {str(e)}"})


# Fetch Recipes Based on Ingredients and Preference
def fetch_recipes(ingredients, preference):
    url = f"https://api.spoonacular.com/recipes/findByIngredients?ingredients={ingredients}&number=10&apiKey={API_KEY}"
    response = requests.get(url)

    if response.status_code != 200:
        return []

    recipes = response.json()

    # Get detailed recipes with nutrition data
    detailed_recipes = []
    for recipe in recipes:
        details_url = f"https://api.spoonacular.com/recipes/{recipe['id']}/information?includeNutrition=true&apiKey={API_KEY}"
        details_response = requests.get(details_url)

        if details_response.status_code == 200:
            details = details_response.json()
            if preference == "vegetarian" and not details.get("vegetarian", False):
                continue  # Skip non-veg for vegetarians
            elif preference == "non-vegetarian" and details.get("vegetarian", False):
                continue  # Skip veg for non-vegetarians

            detailed_recipes.append({
                "title": details["title"],
                "instructions": details.get("instructions", "No instructions available."),
                "calories": details["nutrition"]["nutrients"][0]["amount"],
                "protein": details["nutrition"]["nutrients"][8]["amount"],
                "carbs": details["nutrition"]["nutrients"][3]["amount"],
                "fat": details["nutrition"]["nutrients"][1]["amount"]
            })

    return detailed_recipes


# Select Recipes for Three Meals Based on BMI
def select_meal_plan(recipes, bmi):
    meal_plan = {}

    # Categorize meals based on BMI
    if bmi < 18.5:
        meal_plan["breakfast"] = recipes[0] if len(recipes) > 0 else None
        meal_plan["lunch"] = recipes[1] if len(recipes) > 1 else None
        meal_plan["dinner"] = recipes[2] if len(recipes) > 2 else None
    elif 18.5 <= bmi < 24.9:
        meal_plan["breakfast"] = recipes[1] if len(recipes) > 1 else None
        meal_plan["lunch"] = recipes[2] if len(recipes) > 2 else None
        meal_plan["dinner"] = recipes[3] if len(recipes) > 3 else None
    elif 25 <= bmi < 29.9:
        meal_plan["breakfast"] = recipes[2] if len(recipes) > 2 else None
        meal_plan["lunch"] = recipes[3] if len(recipes) > 3 else None
        meal_plan["dinner"] = recipes[4] if len(recipes) > 4 else None
    else:
        meal_plan["breakfast"] = recipes[3] if len(recipes) > 3 else None
        meal_plan["lunch"] = recipes[4] if len(recipes) > 4 else None
        meal_plan["dinner"] = recipes[5] if len(recipes) > 5 else None

    return meal_plan


if __name__ == "__main__":
    app.run(debug=True, port=5000)